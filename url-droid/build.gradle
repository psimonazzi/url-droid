apply plugin: 'java'

sourceCompatibility = "1.6"
targetCompatibility = "1.6"
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

version = '2.2.0'

ext.buildTimestamp = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date())


repositories {
    jcenter()
}


dependencies {
    testCompile 'junit:junit:4.11'
}


tasks.withType(Jar) {
    manifest = project.manifest {
        attributes(
            "Application-Version": version,
            "Implementation-Version": version,
            "Build-Timestamp": project.ext.buildTimestamp,
            "Min-Java-Version": sourceCompatibility
        )
    }
}


// Replace tokens with values in a properties file to be used by the app
afterEvaluate {
    configure([processResources, sourcesJar]) {
        from(sourceSets.main.resources.srcDirs) {
            include '**/app.properties'
            filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [
                    version: project.version,
                    buildTimestamp: project.ext.buildTimestamp
                ])
        }
    }
}


task sourcesJar(type: Jar, dependsOn: classes,
    description: 'Create a jar that also includes sources') {
    classifier = 'sources'
    from sourceSets.main.output.classesDir
    from(sourceSets.main.allSource) {
        exclude '**/app.properties'
    }
}


task javadocJar(type: Jar, dependsOn: javadoc,
    description: 'Create javadoc jar') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


// build additional artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:cast" << "-Xlint:finally" << "-Xlint:overrides" << "-Xlint:path" << "-Xlint:deprecation"
}

